}
}
else{
stop("Dimensionality_reduction must be either PCA or CMF")
}
}
datasets_with_reduced_features <- list("train"= trainingdataframe_adjusted, "test"= testingdataframe_adjusted)
return(datasets_with_reduced_features)
}
# This function is to adjust the mtry hyperparameter for the random forest model input. The hyperparameter search has defined mtry as % of the number of features in a dataset but the randomforest function requires an absolute number of features.
#
# Input:
# hyperparameters (in input): The full hyperparameter search space
# dataframe: The dataset
# k: The row number of the hyperparameters, where mtry needs to be adjusted to an absolute number
#
# Output:
# hyperparameters (in return): The hyperparameters with the mtry adjusted in row k, where mtry is now an absolute number instead of a percentage value
adjust_mtry <- function(hyperparameters,dataframe,k){
if ("mtry" %in% colnames(hyperparameters)){
hyperparameters[k,]$mtry <- ceiling(hyperparameters[k,]$mtry * (ncol(dataframe) - 1)) # to prevent it going to zero we use the ceiling function instead of round
}
return(hyperparameters)
}
# This function duplicates the hyperparameter search and adds the dimensionality reduction method to the hyperparameters
#
# Input:
# high_dimensional: A boolean value that indicates whether the dataset is high-dimensional or not, we only applied this function to high dimensional vis-NIR, NIR and MIR datasets
# hyperparameters: The original hyperparamter search space
#
# Output:
# adjusted_hyperparameters: The duplicated hyperparameters with the dimensionality reduction method added to the hyperparameters
adjust_hyperparameters <- function(high_dimensional,hyperparameters){
if (high_dimensional == T){
hyperparameters_PCA <- hyperparameters
hyperparameters_PCA$Dimensionality_reduction <- "PCA"
hyperparameters_CMF <- hyperparameters
hyperparameters_CMF$Dimensionality_reduction <- "CMF"
adjusted_hyperparameters <- rbind(hyperparameters_PCA, hyperparameters_CMF)
}
else{
adjusted_hyperparameters <- hyperparameters
}
return(adjusted_hyperparameters)
}
# A slight adjustment of the prior function for MLR, with less hyperparameter runs, since it is deterministic and repeating is not necessary
adjust_hyperparameters_MLR <- function(high_dimensional,hyperparameters){
if (high_dimensional == T){
hyperparameters_CMF <- hyperparameters
hyperparameters_CMF$Dimensionality_reduction <- "CMF"
hyperparameters_PCA <- data.frame(Dimensionality_reduction = "PCA", PCA_number =5:max(hyperparameters$PCA_number),CMF_cutoff=0) # only a single repeat for PCA with 5 to 20
adjusted_hyperparameters <- rbind(hyperparameters_PCA, hyperparameters_CMF)
}
else{
adjusted_hyperparameters <- hyperparameters
}
return(adjusted_hyperparameters)
}
# This function starts the benchmarking of the random forest model for a specific soil property
#
# Input:
# dataset: The dataset
# soil_property: The soil property that is being predicted
# folds: The cross-validation folds (outer folds), for inner folds fixed to 5
# hyperparameters: The hyperparameter search space
# high_dimensional: A boolean value that indicates whether the dataset is high-dimensional or not, for high dimensional datasets with NIR, vis-NIR and MIR features we applied further dimensionality reduction methods
#
# Output:
# Predictions_list_RF: A list which contains, the predicted and observed values (outer folds), the performances for the given hyperparamters (inner folds), the best hyperparameters, which were selected for the training in the outer folds and lastly the training and test dataframes for the outer folds
RF_benchmarking <- function(dataset,soil_property,folds,hyperparameters,high_dimensional){
cat(sprintf("Starting RF benchmarking at %s for soil property %s\n",
format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
soil_property))
dataset_target<- Drop_non_predicted_soil_properties(dataset,soil_property)
hyperparameters <- adjust_hyperparameters(high_dimensional,hyperparameters)
predicted_values <- c()
test_values <- c()
Predictions_list_RF <- foreach(i = 1:max(folds), .combine = combine_lists, .packages = package_vector, .export = ls(globalenv())) %dopar% {
training_data <- dataset_target[folds != i,]
test_data <- dataset_target[folds == i,]
performance_hyperparamaters <- data.frame()
folds_nested <- sample_cv(training_data, 5) #nested CV folds determined as 10
for (k in 1:nrow(hyperparameters)){
predicted_values_nested <- c()
test_values_nested <- c()
for (j in 1:max(folds_nested)){
training_data_nested <- training_data[folds_nested != j,]
test_data_nested <- training_data[folds_nested == j,]
reduced_data_nested <- reduce_dimensionality(high_dimensional,training_data_nested, test_data_nested, hyperparameters[k, , drop = FALSE])
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
absolute_mtry_hyperparameter <- adjust_mtry(hyperparameters,training_data_nested_2,k)
model_nested <- ranger(formula = as.formula(paste(soil_property, "~ .")), data = training_data_nested_2,
num.trees = hyperparameters$num.trees[k],
max.depth = hyperparameters$max.depth[k],
mtry = absolute_mtry_hyperparameter$mtry[k],
min.node.size = hyperparameters$min.node.size[k],
sample.fraction = hyperparameters$sample.fraction[k])
model_nested_predictions <- predict(model_nested, data = test_data_nested_2)
predicted_values_nested <- c(predicted_values_nested, model_nested_predictions$predictions)
test_values_nested <- c(test_values_nested, test_data_nested_2[[soil_property]])
}
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k,], "Fold" = i )
performance_hyperparamaters <- rbind(performance_hyperparamaters, performance_hyperparamaters_bind)
}
best_hyperparamaters <- performance_hyperparamaters[which.min(performance_hyperparamaters$RMSE),]
reduced_data <- reduce_dimensionality(high_dimensional,training_data, test_data, best_hyperparamaters)
training_data_2 <-reduced_data$train
test_data_2 <-reduced_data$test
absolute_best_mtry_hyperparameter <- adjust_mtry(best_hyperparamaters,training_data_2,1)
model <- ranger(formula = as.formula(paste(soil_property, "~ .")), data = training_data_2,
num.trees = best_hyperparamaters$num.trees,
max.depth = best_hyperparamaters$max.depth,
mtry = absolute_best_mtry_hyperparameter$mtry,
min.node.size = best_hyperparamaters$min.node.size,
sample.fraction = best_hyperparamaters$sample.fraction)
model_predictions <- predict(model, data = test_data_2)
predicted_values <- c(predicted_values, model_predictions$predictions)
test_values <- c(test_values, test_data_2[[soil_property]])
list(data.frame("Predicted"= predicted_values, "Measured"= test_values),
performance_hyperparamaters,
best_hyperparamaters,
list(cbind(training_data_2,data.frame("Fold"=i))),
list(cbind(test_data_2,data.frame("Fold"=i))))
}
cat(sprintf("Completed RF benchmarking at %s for soil property %s\n",
format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
soil_property))
return(Predictions_list_RF)
}
# Same as for RF_benchmarking but for MLR
MLR_benchmarking <- function(dataset,soil_property,folds,hyperparameters,high_dimensional){
cat(sprintf("Starting MLR benchmarking at %s for soil property %s\n",
format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
soil_property))
dataset_target<- Drop_non_predicted_soil_properties(dataset,soil_property)
hyperparameters <- adjust_hyperparameters_MLR(high_dimensional,hyperparameters)
predicted_values <- c()
test_values <- c()
Predictions_list_MLR <- foreach(i = 1:max(folds), .combine = combine_lists, .packages = package_vector, .export = ls(globalenv())) %dopar% {
training_data <- dataset_target[folds != i,]
test_data <- dataset_target[folds == i,]
performance_hyperparamaters <- data.frame()
if (high_dimensional == TRUE){
folds_nested <- sample_cv(training_data, 5)
for (k in 1:nrow(hyperparameters)){
predicted_values_nested <- c()
test_values_nested <- c()
for (j in 1:max(folds_nested)){
training_data_nested <- training_data[folds_nested != j,]
test_data_nested <- training_data[folds_nested == j,]
reduced_data_nested <- reduce_dimensionality(high_dimensional,training_data_nested, test_data_nested, hyperparameters[k, , drop = FALSE])
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
model_nested <- lm(as.formula(paste(soil_property, "~ .")), data = training_data_nested_2)
model_nested_predictions <- predict(model_nested, newdata = test_data_nested_2)
predicted_values_nested <- c(predicted_values_nested, model_nested_predictions)
test_values_nested <- c(test_values_nested, test_data_nested_2[[soil_property]])
}
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k, , drop = FALSE], "Fold" = i )
performance_hyperparamaters <- rbind(performance_hyperparamaters, performance_hyperparamaters_bind)
}
best_hyperparamaters <- performance_hyperparamaters[which.min(performance_hyperparamaters$RMSE),]
}
else{
best_hyperparamaters <- NA
}
reduced_data <- reduce_dimensionality(high_dimensional,training_data, test_data, best_hyperparamaters)
training_data_2 <-reduced_data$train
test_data_2 <-reduced_data$test
model <- lm(as.formula(paste(soil_property, "~ .")), data = training_data_2)
model_predictions <- predict(model, test_data_2)
predicted_values <- c(predicted_values, model_predictions)
test_values <- c(test_values, test_data_2[[soil_property]])
list(data.frame("Predicted"= predicted_values, "Measured"= test_values),
performance_hyperparamaters,
data.frame(best_hyperparamaters),
list(cbind(training_data_2,data.frame("Fold"=i))),
list(cbind(test_data_2,data.frame("Fold"=i))))
}
cat(sprintf("Completed MLR benchmarking at %s for soil property %s\n",
format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
soil_property))
return(Predictions_list_MLR)
}
# Same as for RF_benchmarking but for CatBoost
CatBoost_benchmarking <- function(dataset,soil_property,folds,hyperparameters,high_dimensional){
cat(sprintf("Starting CatBoost benchmarking at %s for soil property %s\n",
format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
soil_property))
dataset_target<- Drop_non_predicted_soil_properties(dataset,soil_property)
hyperparameters <- adjust_hyperparameters(high_dimensional,hyperparameters)
predicted_values <- c()
test_values <- c()
Predictions_list_CatBoost <- foreach(i = 1:max(folds), .combine = combine_lists, .packages = package_vector, .export = ls(globalenv())) %dopar% {
training_data <- dataset_target[folds != i,]
test_data <- dataset_target[folds == i,]
performance_hyperparamaters <- data.frame()
folds_nested <- sample_cv(training_data, 5)
for (k in 1:nrow(hyperparameters)){
predicted_values_nested <- c()
test_values_nested <- c()
for (j in 1:max(folds_nested)){
training_data_nested <- training_data[folds_nested != j,]
test_data_nested <- training_data[folds_nested == j,]
reduced_data_nested <- reduce_dimensionality(high_dimensional,training_data_nested, test_data_nested, hyperparameters[k, , drop = FALSE])
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
train_pool_nested <- catboost.load_pool(data =  training_data_nested_2[-1] , label = training_data_nested_2[[soil_property]])
model_nested <- catboost.train(train_pool_nested,  NULL,
params = list(iterations = hyperparameters$iterations[k],
learning_rate=hyperparameters$learning_rate[k],
depth=hyperparameters$depth[k],
l2_leaf_reg=hyperparameters$l2_leaf_reg[k],
rsm=hyperparameters$rsm[k],
subsample=hyperparameters$subsample[k],
random_strength=hyperparameters$random_strength[k],
border_count=254,
logging_level="Silent"))
test_pool_nested <- catboost.load_pool(test_data_nested_2[-1])
model_nested_predictions <- catboost.predict(model_nested, test_pool_nested)
predicted_values_nested <- c(predicted_values_nested, model_nested_predictions)
test_values_nested <- c(test_values_nested, test_data_nested_2[[soil_property]])
}
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k,], "Fold" = i )
performance_hyperparamaters <- rbind(performance_hyperparamaters, performance_hyperparamaters_bind)
}
best_hyperparamaters <- performance_hyperparamaters[which.min(performance_hyperparamaters$RMSE),]
reduced_data <- reduce_dimensionality(high_dimensional,training_data, test_data, best_hyperparamaters)
training_data_2 <-reduced_data$train
test_data_2 <-reduced_data$test
train_pool <- catboost.load_pool(data =  training_data_2[-1] , label = training_data_2[[soil_property]])
model <- catboost.train(train_pool,  NULL,
params = list(iterations = best_hyperparamaters$iterations,
learning_rate=best_hyperparamaters$learning_rate,
depth=best_hyperparamaters$depth,
l2_leaf_reg=best_hyperparamaters$l2_leaf_reg,
rsm=best_hyperparamaters$rsm,
subsample=best_hyperparamaters$subsample,
random_strength=best_hyperparamaters$random_strength,
border_count=254,
logging_level="Silent"))
test_pool <- catboost.load_pool(test_data_2[-1])
model_predictions <- catboost.predict(model, test_pool)
predicted_values <- c(predicted_values, model_predictions)
test_values <- c(test_values, test_data_2[[soil_property]])
list(data.frame("Predicted"= predicted_values, "Measured"= test_values),
performance_hyperparamaters,
best_hyperparamaters,
list(cbind(training_data_2,data.frame("Fold"=i))),
list(cbind(test_data_2,data.frame("Fold"=i))))
}
cat(sprintf("Completed CatBoost benchmarking at %s for soil property %s\n",
format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
soil_property))
return(Predictions_list_CatBoost)
}
# Same as for RF_benchmarking but for SVR
SVR_benchmarking <- function(dataset,soil_property,folds,hyperparameters,high_dimensional){
cat(sprintf("Starting SVR benchmarking at %s for soil property %s\n",
format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
soil_property))
dataset_target<- Drop_non_predicted_soil_properties(dataset,soil_property)
hyperparameters <- adjust_hyperparameters(high_dimensional,hyperparameters) #####
predicted_values <- c()
test_values <- c()
Predictions_list_SVR <- foreach(i = 1:max(folds), .combine = combine_lists, .packages = package_vector, .export = ls(globalenv())) %dopar% {
training_data <- dataset_target[folds != i,]
test_data <- dataset_target[folds == i,]
performance_hyperparamaters <- data.frame()
folds_nested <- sample_cv(training_data, 5)
for (k in 1:nrow(hyperparameters)){
predicted_values_nested <- c()
test_values_nested <- c()
for (j in 1:max(folds_nested)){
training_data_nested <- training_data[folds_nested != j,]
test_data_nested <- training_data[folds_nested == j,]
reduced_data_nested <- reduce_dimensionality(high_dimensional,training_data_nested, test_data_nested, hyperparameters[k, , drop = FALSE])
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
model_nested <- svm(
y = training_data_nested_2[[soil_property]], x = training_data_nested_2[-1],
kernel=hyperparameters$kernel[k],
cost=hyperparameters$cost[k],
gamma=hyperparameters$gamma[k]
)
model_nested_predictions <- as.vector(predict(model_nested, newdata = test_data_nested_2[-1]))
predicted_values_nested <- c(predicted_values_nested, model_nested_predictions)
test_values_nested <- c(test_values_nested, test_data_nested_2[[soil_property]])
}
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k,], "Fold" = i )
performance_hyperparamaters <- rbind(performance_hyperparamaters, performance_hyperparamaters_bind)
}
best_hyperparamaters <- performance_hyperparamaters[which.min(performance_hyperparamaters$RMSE),]
reduced_data <- reduce_dimensionality(high_dimensional,training_data, test_data, best_hyperparamaters)
training_data_2 <-reduced_data$train
test_data_2 <-reduced_data$test
model <- svm(
y = training_data_2[[soil_property]], x = training_data_2[-1],
kernel=best_hyperparamaters$kernel,
cost=best_hyperparamaters$cost,
gamma=best_hyperparamaters$gamma
)
model_predictions <- as.vector(predict(model, newdata = test_data_2[-1]))
predicted_values <- c(predicted_values, model_predictions)
test_values <- c(test_values, test_data_2[[soil_property]])
list(data.frame("Predicted"= predicted_values, "Measured"= test_values),
performance_hyperparamaters,
best_hyperparamaters,
list(cbind(training_data_2,data.frame("Fold"=i))),
list(cbind(test_data_2,data.frame("Fold"=i))))
}
cat(sprintf("Completed SVR benchmarking at %s for soil property %s\n",
format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
soil_property))
return(Predictions_list_SVR)
}
RP.62_data_table <- readRDS(file = "Stored_dataset_files/RP.62_data_table.rds")
#Load folds
RP.62_folds <- readRDS(file = "Stored_split_files/RP.62_folds.rds")
#Load Hyperparameters
RP.62_tuning_hyperparamaters_RF <- readRDS(file = "Stored_Hyperparameter_search_files/RF_Hyperparameter_search")
tuning_hyperparamaters_CatBoost <- readRDS(file = "Stored_Hyperparameter_search_files/CatBoost_Search_search")
tuning_hyperparameters_SVR <- readRDS(file = "Stored_Hyperparameter_search_files/SVR_Hyperparameter_search")
RP.62_data_table
dataset_target<- Drop_non_predicted_soil_properties(RP.62_data_table,"Clay_target")
dataset_target<- Drop_non_predicted_soil_properties(RP.62_data_table,"Clay_target")
library(catboost)
library(ranger)
library(doParallel)
library(foreach)
library(parallel)
library(Metrics)
library(future)
library(dplyr)
library(stats)
library(optparse)
library(caret)
library(e1071)
dataset_target<- Drop_non_predicted_soil_properties(RP.62_data_table,"Clay_target")
dataset_target
hyperparameters <- adjust_hyperparameters(T,RP.62_tuning_hyperparamaters_RF)
hyperparameters
View(hyperparameters)
predicted_values <- c()
test_values <- c()
training_data <- dataset_target[folds != 1,]
test_data <- dataset_target[folds == 1,]
training_data <- dataset_target[RP.62_folds != 1,]
test_data <- dataset_target[RP.62_folds == 1,]
test_data
training_data
folds_nested <- sample_cv(training_data, 5)
folds_nested
predicted_values <- c()
test_values <- c()
training_data <- dataset_target[RP.62_folds != 1,]
test_data <- dataset_target[RP.62_folds == 1,]
training_data
test_data
performance_hyperparamaters <- data.frame()
folds_nested <- sample_cv(training_data, 5)
folds_nested
predicted_values_nested <- c()
test_values_nested <- c()
training_data_nested <- training_data[folds_nested != 1,]
test_data_nested <- training_data[folds_nested == 1,]
hyperparameters[1, , drop = FALSE]
reduced_data_nested <- reduce_dimensionality(T,training_data_nested, test_data_nested, hyperparameters[1, , drop = FALSE])
reduced_data_nested
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
training_data_nested_2
test_data_nested_2
reduced_data_nested <- reduce_dimensionality(T,training_data_nested, test_data_nested, hyperparameters[1, , drop = FALSE])
reduced_data_nested
hyperparameters[1, , drop = FALSE]
reduced_data_nested <- reduce_dimensionality(T,training_data_nested, test_data_nested, hyperparameters[401, , drop = FALSE])
reduced_data_nested
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
View(training_data_nested_2)
View(test_data_nested_2)
reduced_data_nested
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
reduced_data_nested <- reduce_dimensionality(T,training_data_nested, test_data_nested, hyperparameters[1, , drop = FALSE])
reduced_data_nested
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
training_data_nested_2
test_data_nested_2
absolute_mtry_hyperparameter <- adjust_mtry(hyperparameters,training_data_nested_2,1)
absolute_mtry_hyperparameter
k <- 1
model_nested <- ranger(formula = as.formula(paste("Clay_target", "~ .")), data = training_data_nested_2,
num.trees = hyperparameters$num.trees[k],
max.depth = hyperparameters$max.depth[k],
mtry = absolute_mtry_hyperparameter$mtry[k],
min.node.size = hyperparameters$min.node.size[k],
sample.fraction = hyperparameters$sample.fraction[k])
model_nested
absolute_mtry_hyperparameter
View(training_data_nested_2)
model_nested
model_nested_predictions <- predict(model_nested, data = test_data_nested_2)
model_nested_predictions
model_nested_predictions$predictions
model_nested_predictions$num.independent.variables
model_nested_predictions$treetype
ncol(training_data_nested_2)
predicted_values_nested <- c(predicted_values_nested, model_nested_predictions$predictions)
test_values_nested <- c(test_values_nested, test_data_nested_2[[soil_property]])
soil_property <- "Clay_target"
i <- 1
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k,], "Fold" = i )
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k,], "Fold" = i )
predicted_values_nested <- c(predicted_values_nested, model_nested_predictions$predictions)
test_values_nested <- c(test_values_nested, test_data_nested_2[[soil_property]])
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k,], "Fold" = i )
predicted_values_nested
test_values_nested
predicted_values_nested <- c()
test_values_nested <- c()
predicted_values_nested <- c(predicted_values_nested, model_nested_predictions$predictions)
test_values_nested <- c(test_values_nested, test_data_nested_2[[soil_property]])
predicted_values_nested
test_values_nested
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k,], "Fold" = i )
performance_hyperparamaters <- rbind(performance_hyperparamaters, performance_hyperparamaters_bind)
predicted_values_nested
test_values_nested
predicted_values_nested <- c()
test_values_nested <- c()
predicted_values_nested <- c(predicted_values_nested, model_nested_predictions$predictions)
test_values_nested <- c(test_values_nested, test_data_nested_2[[soil_property]])
predicted_values_nested
test_values_nested
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k,], "Fold" = i )
performance_hyperparamaters <- rbind(performance_hyperparamaters, performance_hyperparamaters_bind)
performance_hyperparamaters_bind
performance_hyperparamaters
training_data_nested <- training_data[folds_nested != 1,]
test_data_nested <- training_data[folds_nested == 1,]
hyperparameters[1, , drop = FALSE]
hyperparameters[401, , drop = FALSE]
reduced_data_nested <- reduce_dimensionality(T,training_data_nested, test_data_nested, hyperparameters[401, , drop = FALSE])
reduced_data_nested
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
training_data_nested_2
test_data_nested_2
predicted_values_nested <- c()
test_values_nested <- c()
training_data_nested <- training_data[folds_nested != 1,]
test_data_nested <- training_data[folds_nested == 1,]
hyperparameters[401, , drop = FALSE]
reduced_data_nested <- reduce_dimensionality(T,training_data_nested, test_data_nested, hyperparameters[401, , drop = FALSE])
reduced_data_nested
training_data_nested_2 <-reduced_data_nested$train
test_data_nested_2 <-reduced_data_nested$test
training_data_nested_2
test_data_nested_2
absolute_mtry_hyperparameter <- adjust_mtry(hyperparameters,training_data_nested_2,401)
absolute_mtry_hyperparameter
k <- 401
soil_property <- "Clay_target"
model_nested <- ranger(formula = as.formula(paste("Clay_target", "~ .")), data = training_data_nested_2,
num.trees = hyperparameters$num.trees[401],
max.depth = hyperparameters$max.depth[401],
mtry = absolute_mtry_hyperparameter$mtry[401],
min.node.size = hyperparameters$min.node.size[401],
sample.fraction = hyperparameters$sample.fraction[401])
model_nested
ncol(training_data_nested_2)
model_nested_predictions <- predict(model_nested, data = test_data_nested_2)
predicted_values_nested <- c(predicted_values_nested, model_nested_predictions$predictions)
test_values_nested <- c(test_values_nested, test_data_nested_2[[soil_property]])
predicted_values_nested
test_values_nested
performance_hyperparamaters_bind <-cbind(point_prediction_performance(predicted_values_nested, test_values_nested), hyperparameters[k,], "Fold" = i )
performance_hyperparamaters_bind
performance_hyperparamaters <- rbind(performance_hyperparamaters, performance_hyperparamaters_bind)
performance_hyperparamaters
best_hyperparamaters <- performance_hyperparamaters[which.min(performance_hyperparamaters$RMSE),]
best_hyperparamaters
performance_hyperparamaters
best_hyperparamaters <- performance_hyperparamaters[which.min(performance_hyperparamaters$RMSE),]
best_hyperparamaters
reduced_data <- reduce_dimensionality(T,training_data, test_data, best_hyperparamaters)
training_data_2 <-reduced_data$train
test_data_2 <-reduced_data$test
training_data_2
test_data_2
predicted_values_nested
test_values_nested
training_data_nested_2
test_data_nested_2
absolute_best_mtry_hyperparameter <- adjust_mtry(best_hyperparamaters,training_data_2,1)
absolute_best_mtry_hyperparameter
model <- ranger(formula = as.formula(paste(soil_property, "~ .")), data = training_data_2,
num.trees = best_hyperparamaters$num.trees,
max.depth = best_hyperparamaters$max.depth,
mtry = absolute_best_mtry_hyperparameter$mtry,
min.node.size = best_hyperparamaters$min.node.size,
sample.fraction = best_hyperparamaters$sample.fraction)
model
model_predictions <- predict(model, data = test_data_2)
predicted_values <- c(predicted_values, model_predictions$predictions)
test_values <- c(test_values, test_data_2[[soil_property]])
test_values
predicted_values
